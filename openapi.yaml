openapi: 3.1.0
info:
    title: Perfect Match API
    version: 1.0.0
components:
    schemas:
        Profile:
            type: object
            properties:
                complete:
                    type: boolean
                firstName:
                    type: string
                lastName:
                    type: string
                gender:
                    type: string
                genderPref:
                    type: array
                    items:
                        type: string
                age:
                    type: integer
                height:
                    type: integer
                city:
                    type: string
                race:
                    type: array
                    items:
                        type: string
                year:
                    type: string
                college:
                    type: string
                major:
                    type: string
                commitment:
                    type: string
                relationshipType:
                    type: string
                agePref:
                    type: object
                    properties:
                        youngest:
                            type: integer
                        oldest:
                            type: integer
                activities:
                    type: array
                    items:
                        type: string
                describeYourself:
                    type: string
                bio:
                    type: string
        Survey:
            type: object
            properties:
                complete:
                    type: boolean
                p1: { type: string, enum: survey.range }
                p2: { type: string, enum: survey.range }
                p3: { type: string, enum: survey.range }
                p4: { type: string, enum: survey.range }
                p5: { type: string, enum: survey.range }
                p6: { type: string, enum: survey.range }
                p7: { type: string, enum: survey.range }
                p8: { type: string, enum: survey.range }
                p9: { type: string, enum: survey.range }
                p10: { type: String, enum: survey.range }
                p11: { type: String, enum: survey.range }
                p12: { type: String, enum: survey.range }
                p13: { type: String, enum: survey.range }
                p14: { type: String, enum: survey.range }
                p15: { type: String, enum: survey.range }
                p16: { type: String, enum: survey.range }
                p17: { type: String, enum: survey.range }
                p18: { type: String, enum: survey.range }
                p19: { type: String, enum: survey.range }
                generalPersonality: { type: String }
                introvert: { type: Number }
                introvert_same: { type: String }
                easygoing: { type: Number }
                easygoing_same: { type: String }
                numdated: { type: Number }
                longestrelationship: { type: Number }
                ricePurity: { type: String }
                pairedwith: { type: String }
                apps: { type: Array, items: { type: String } }
                politics: { type: Number }
                politically_active: { type: Number }
                habits:
                    type: object
                    properties:
                        drinking: { type: String }
                        smoking: { type: String }
                        weed: { type: String }
                        other: { type: String }
                partner_habits:
                    type: object
                    properties:
                        drinking: { type: String }
                        smoking: { type: String }
                        weed: { type: String }
                        other: { type: String }
                deal_breakers:
                    type: Array
                    items: { type: String }
                partner_deal_breakers:
                    type: Array
                    items: { type: String }
        User:
            type: object
            properties:
                email:
                    type: string
                    format: email
                optIn:
                    type: boolean
                profile:
                    $ref: '#/components/schemas/Profile'
                survey:
                    $ref: '#/components/schemas/Survey'
                crushes:
                    type: Array
                    items: { type: string }
                forbidden:
                    type: Array
                    items: { type: string }
                matches:
                    type: Array
                    items:
                        type: string
                        format: objectId
                matchReviews:
                    type: Array
                    items:
                        type: string
                        format: objectId
                collab:
                    type: object
                    properties:
                        mutual: { type: boolean }
                categoryRanking:
                    type: Array
                    items: { type: number }
                feedback:
                    $ref: '#/components/schemas/SurveyFeedback'
        Match:
            type: object
            properties:
                partnerAId:
                    type: string
                    format: objectId
                partnerBId:
                    type: string
                    format: objectId
                partnerAFeedback:
                    $ref: '#/components/schemas/MatchFeedback'
                partnerBFeedback:
                    $ref: '#/components/schemas/MatchFeedback'
                overallStatus:
                    type: string
                    enum: ['pending', 'complete', 'partial']
        MatchFeedback:
            type: object
            properties:
                overallRating:
                    type: number
                topReasonForRating:
                    type: string
                metMatch:
                    type: boolean
                numberOfDates:
                    type: number
                inRelationshipWithMatch:
                    type: boolean
                additionalComments:
                    type: string
                dateSubmitted:
                    type: string
                    format: date-time
        SurveyFeedback:
            type: object
            properties:
                bad:
                    type: boolean
                opportunities:
                    type: boolean
                fun:
                    type: boolean
                joy:
                    type: boolean
                memories:
                    type: boolean
                anticipation:
                    type: boolean
                categoryRanking:
                    type: Array
                    items: { type: string }
                surveyFeedback:
                    type: string
                otherValentinesDayImpact:
                    type: string
                comments:
                    type: string
paths:
    /api/mutual/matches:
        post:
            summary: Fetch mutual verified matches
            description: This endpoint fetches mutual verified matches for a user with a valid API key, email, and OTP.
            operationId: fetchMutualMatches
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - apiKey
                                - email
                                - otp
                            properties:
                                apiKey:
                                    type: string
                                email:
                                    type: string
                                    format: email
                                otp:
                                    type: string
            responses:
                '200':
                    description: Successful response with mutual matches
                '400':
                    description: Bad request, invalid inputs

    /api/mutual/otp:
        post:
            summary: Request One-Time Password
            description: Requests an OTP for a given email address and validates the API token.
            operationId: requestOTP
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - email
                                - apiKey
                            properties:
                                email:
                                    type: string
                                    format: email
                                apiKey:
                                    type: string
            responses:
                '200':
                    description: OTP request successful
                '400':
                    description: Bad request, invalid inputs

    /api/review/{matchid}:
        post:
            summary: Update match review
            description: Updates match review details for a given match ID.
            operationId: updateMatchReview
            parameters:
                - name: matchid
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MatchFeedback'
            responses:
                '200':
                    description: Match review updated successfully
                '400':
                    description: Bad request, invalid inputs

    /api/feedback:
        post:
            summary: Update user feedback
            description: Updates user feedback and returns the updated user profile.
            operationId: updateUserFeedback
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SurveyFeedback'
            responses:
                '200':
                    description: User feedback updated and profile returned
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Profile'
                '400':
                    description: Bad request or invalid session

    /api/matches:
        get:
            summary: Retrieve user matches
            description: Retrieves matches for the authenticated user.
            operationId: getUserMatches
            responses:
                '200':
                    description: List of user matches
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Match'

    /api/optin:
        post:
            summary: Update opt-in status
            description: Updates the user's opt-in status for receiving updates or newsletters.
            operationId: updateOptInStatus
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - optIn
                            properties:
                                optIn:
                                    type: boolean
            responses:
                '200':
                    description: Opt-in status updated
                '400':
                    description: Bad request or invalid session

    /api/profile:
        get:
            summary: Retrieve user profile
            description: Returns the user's profile details after authentication.
            responses:
                '200':
                    description: User profile data retrieved successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Profile'
                '401':
                    description: Unauthorized access.
        post:
            summary: Update user profile
            description: Updates the user's profile details after authentication.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Profile'
            responses:
                '200':
                    description: User profile updated successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Profile'
                '401':
                    description: Unauthorized access.

    /api/restrict:
        post:
            summary: Update user's restrictions
            description: Updates the user's list of crushes and forbidden users after authentication.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestrictionUpdate'
            responses:
                '200':
                    description: Restriction list updated successfully.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                '401':
                    description: Unauthorized access.

    /api/survey:
        post:
            summary: Update survey
            description: Updates the user's survey details after authentication.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Survey'
            responses:
                '200':
                    description: Survey updated successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Survey'
                '401':
                    description: Unauthorized access.

    /api/users:
        get:
            summary: Retrieve list of users
            description: Returns a list of users after verifying admin privileges.
            operationId: getUsersByPage
            parameters:
                - in: query
                name: page
                schema:
                    type: integer
                    example: 1
                required: false
                description: Page number for pagination.
                default: 1
                - in: query
                name: limit
                schema:
                    type: integer
                    example: 10
                required: false
                description: Number of users per page.
                default: 0
                - in: query
                name: searchTerm
                schema:
                    type: string
                    example: John
                required: false
                description: Search term to filter users for matching name or email.
            responses:
                '200':
                    description: List of users retrieved successfully.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                '401':
                    description: Unauthorized access.
                '403':
                    description: Access forbidden.

    /api/users/count:
        get:
            summary: Retrieve total user count
            description: Returns the total number of users or filters based on the `status` query parameter.
            operationId: getUserCount
            parameters:
                - in: query
                name: status
                schema:
                    type: string
                    enum: [opted_in, profiled]
                    example: opted_in
                required: false
                description: |
                    Filter users by status:
                    - `opted_in`: Count of users who have opted in.
                    - `profiled`: Count of users who have completed their profile.
                    - Undefined: Total count of all users.
            responses:
                '200':
                    description: Total user count
                    content:
                        application/json:
                            schema:
                                type: integer
                '405':
                    description: Method not allowed